// Generated from OpenAPI specification
// Do not edit this file manually

// API Response wrapper type
export type ApiResponse<T> = {
  success: true;
  data: T;
} | {
  success: false;
  error: string;
};

// Error response type
export interface ErrorResponse {
  success: false;
  error: string;
}

// Study Log types
export interface StudyLog {
  id?: number;
  date: string;
  subject: string;
  topics: string[];
  studyTime: number;
  understanding: number;
  memo?: string;
  efficiency?: number;
}

export type CreateStudyLogRequest = Omit<StudyLog, 'id' | 'efficiency'>;

// Study Plan types
export interface StudyWeek {
  id: number;
  weekNumber: number;
  title: string;
  phase: string;
  goals: string[];
  progressPercentage: number;
  totalStudyTime: number;
  averageUnderstanding: number;
}

export interface StudyDay {
  id: number;
  day: string;
  subject: string;
  topics: string[];
  estimatedTime: number;
  actualTime: number;
  completed: boolean;
  understanding: number;
  memo?: string;
}

// Quiz and Test types (inferred from API structure)
export interface QuizSession {
  id: number;
  userId?: string;
  sessionType: 'category' | 'random' | 'review' | 'weak_points';
  category?: string;
  totalQuestions: number;
  correctAnswers: number;
  totalTime: number;
  avgTimePerQ: number;
  score: number;
  startedAt: string;
  completedAt?: string;
  isCompleted: boolean;
}

export interface Question {
  id: string;
  year: number;
  season: string;
  section: string;
  number: number;
  category: string;
  subcategory?: string;
  difficulty: number;
  question: string;
  choices: string[];
  tags?: string[];
}

export interface MorningTest {
  id?: number;
  date: string;
  category: string;
  totalQuestions: number;
  correctAnswers: number;
  accuracy?: number;
  timeSpent: number;
  memo?: string;
}

export interface AfternoonTest {
  id?: number;
  date: string;
  category: string;
  score: number;
  timeSpent: number;
  memo?: string;
}

// Request types
export type StartQuizSessionRequest = {
  sessionType: 'category' | 'random' | 'review' | 'weak_points';
  questionCount: number;
  category?: string;
};

export type SubmitAnswerRequest = {
  sessionId: number;
  questionId: string;
  userAnswer: string;
  timeSpent?: number;
};

export type CreateMorningTestRequest = Omit<MorningTest, 'id' | 'accuracy'>;
export type CreateAfternoonTestRequest = Omit<AfternoonTest, 'id'>;
