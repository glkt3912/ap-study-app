#!/usr/bin/env node

import fs from 'fs/promises'
import path from 'path'
import openapiTS from 'openapi-typescript'

/**
 * OpenAPI仕様書からTypeScript型定義を自動生成するスクリプト
 */

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000'
const OUTPUT_DIR = path.join(process.cwd(), 'src', 'types')
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'api.ts')

async function generateTypes() {
  try {
    console.log('🔄 OpenAPI仕様書からTypeScript型を生成中...')
    console.log(`📡 Backend URL: ${BACKEND_URL}/doc`)

    // OpenAPI仕様書を取得
    const response = await fetch(`${BACKEND_URL}/doc`)
    if (!response.ok) {
      throw new Error(`Failed to fetch OpenAPI spec: ${response.statusText}`)
    }

    const spec = await response.json()
    console.log('✅ OpenAPI仕様書を取得しました')

    // TypeScript型定義を生成
    const output = await openapiTS(spec, {
      transform: {
        camelCase: true,
      },
    })

    // 出力ディレクトリを作成
    await fs.mkdir(OUTPUT_DIR, { recursive: true })

    // 追加の型定義とユーティリティを含める
    const typeDefinitions = `// Auto-generated from OpenAPI specification
// Do not edit this file manually

${output}

// Additional utility types
export type ApiResponse<T> = {
  success: true
  data: T
} | {
  success: false
  error: string
}

// API paths type helper
export type ApiPaths = paths

// API operation types
export type GetStudyPlanResponse = ApiResponse<components['schemas']['StudyWeek'][]>
export type GetStudyLogResponse = ApiResponse<components['schemas']['StudyLog'][]>
export type CreateStudyLogRequest = components['schemas']['CreateStudyLog']
export type CreateStudyLogResponse = ApiResponse<components['schemas']['StudyLog']>

// Request/Response type helpers
export type PathParams<T extends keyof paths> = paths[T] extends { parameters: { path: infer P } } ? P : never
export type QueryParams<T extends keyof paths> = paths[T] extends { parameters: { query: infer Q } } ? Q : never
export type RequestBody<T extends keyof paths, M extends keyof paths[T]> = 
  paths[T][M] extends { requestBody: { content: { 'application/json': infer B } } } ? B : never
export type ResponseBody<T extends keyof paths, M extends keyof paths[T], S extends number> = 
  paths[T][M] extends { responses: { [K in S]: { content: { 'application/json': infer R } } } } ? R : never

// Export commonly used schemas
export type StudyWeek = components['schemas']['StudyWeek']
export type StudyDay = components['schemas']['StudyDay']
export type StudyLog = components['schemas']['StudyLog']
export type MorningTest = components['schemas']['MorningTest']
export type AfternoonTest = components['schemas']['AfternoonTest']
export type Question = components['schemas']['Question']
export type QuizSession = components['schemas']['QuizSession']
`

    // ファイルに保存
    await fs.writeFile(OUTPUT_FILE, typeDefinitions, 'utf8')

    console.log('✅ TypeScript型定義を生成しました')
    console.log(`📁 出力先: ${OUTPUT_FILE}`)

    // 生成された型の数を表示
    const typeCount = (typeDefinitions.match(/export type/g) || []).length
    const interfaceCount = (typeDefinitions.match(/export interface/g) || []).length
    console.log(`📊 生成された型: ${typeCount} types, ${interfaceCount} interfaces`)

  } catch (error) {
    console.error('❌ 型生成エラー:', error.message)
    
    // バックエンドが起動していない場合のフォールバック
    if (error.message.includes('fetch')) {
      console.log('💡 バックエンドサーバーが起動していない可能性があります')
      console.log('💡 以下のコマンドでバックエンドを起動してから再実行してください:')
      console.log('   cd ../ap-study-backend && npm run dev')
    }
    
    process.exit(1)
  }
}

// スクリプト実行時にバックエンドの起動確認
async function checkBackend() {
  try {
    const response = await fetch(`${BACKEND_URL}/`)
    if (response.ok) {
      console.log('✅ バックエンドサーバーが起動しています')
      return true
    }
  } catch (error) {
    console.log('⚠️  バックエンドサーバーに接続できません')
    return false
  }
  return false
}

async function main() {
  console.log('🚀 API型生成スクリプト開始')
  
  const backendRunning = await checkBackend()
  if (!backendRunning) {
    console.log('💡 バックエンドを起動してから再実行してください')
    process.exit(1)
  }
  
  await generateTypes()
  console.log('🎉 型生成完了!')
}

main()