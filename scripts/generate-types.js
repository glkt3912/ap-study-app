#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';

/**
 * OpenAPI仕様書からTypeScript型定義を自動生成するスクリプト
 */

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';
const OUTPUT_DIR = path.join(process.cwd(), 'src', 'types');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'api.ts');

function generateTypesFromSpec(openApiSpec) {
  try {
    console.log('🔧 OpenAPI型生成を開始...');

    // 基本的なTypeScript型定義を生成
    let typesContent = `// Generated from OpenAPI specification
// Do not edit this file manually

// API Response wrapper type
export type ApiResponse<T> = {
  success: true;
  data: T;
} | {
  success: false;
  error: string;
};

// Error response type
export interface ErrorResponse {
  success: false;
  error: string;
}

`;

    // パスから型を推定
    if (openApiSpec.paths) {
      const paths = openApiSpec.paths;

      // スキーマベースの型定義を生成
      if (paths['/api/studylog']) {
        typesContent += `// Study Log types
export interface StudyLog {
  id?: number;
  date: string;
  subject: string;
  topics: string[];
  studyTime: number;
  understanding: number;
  memo?: string;
  efficiency?: number;
}

export type CreateStudyLogRequest = Omit<StudyLog, 'id' | 'efficiency'>;

`;
      }

      if (paths['/api/study/plan'] || paths['/study-plan']) {
        // バックエンドのZodスキーマに基づいた型定義（nameフィールドベース）
        typesContent += `// Study Plan types
export interface StudyWeek {
  id: number;
  weekNumber: number;
  title: string;
  phase: string;
  goals: string[];
  progressPercentage: number;
  totalStudyTime: number;
  averageUnderstanding: number;
}

export interface StudyDay {
  id: number;
  day: string;
  subject: string;
  topics: string[];
  estimatedTime: number;
  actualTime: number;
  completed: boolean;
  understanding: number;
  memo?: string;
}

// StudyPlan interface (based on backend Zod schema)
export interface StudyPlan {
  id: number;
  userId: number;
  name: string;
  description?: string;
  isActive: boolean;
  startDate: string;
  targetExamDate?: string;
  createdAt: string;
  updatedAt: string;
  templateId?: string;
  templateName?: string;
  studyWeeksData?: any;
  settings: Record<string, any>;
  weeks?: any[];
}

// StudyPlan Request types (based on backend Zod schema)
export interface CreateStudyPlanRequest {
  name: string;
  description?: string;
  templateId?: string;
  templateName?: string;
  studyWeeksData?: any[];
  targetExamDate?: string;
  startDate?: string;
  settings?: Record<string, any>;
}

`;
      }
    }

    // 追加の汎用型
    typesContent += `// Quiz and Test types (inferred from API structure)
export interface QuizSession {
  id: number;
  userId?: number;
  sessionType: 'category' | 'random' | 'review' | 'weak_points';
  category?: string;
  totalQuestions: number;
  correctAnswers: number;
  totalTime: number;
  avgTimePerQ: number;
  score: number;
  startedAt: string;
  completedAt?: string;
  isCompleted: boolean;
}

export interface Question {
  id: string;
  year: number;
  season: string;
  section: string;
  number: number;
  category: string;
  subcategory?: string;
  difficulty: number;
  question: string;
  choices: string[];
  tags?: string[];
}

export interface MorningTest {
  id?: number;
  date: string;
  category: string;
  totalQuestions: number;
  correctAnswers: number;
  accuracy?: number;
  timeSpent: number;
  memo?: string;
}

export interface AfternoonTest {
  id?: number;
  date: string;
  category: string;
  score: number;
  timeSpent: number;
  memo?: string;
}

// Request types
export type StartQuizSessionRequest = {
  sessionType: 'category' | 'random' | 'review' | 'weak_points';
  questionCount: number;
  category?: string;
};

export type SubmitAnswerRequest = {
  sessionId: number;
  questionId: string;
  userAnswer: string;
  timeSpent?: number;
};

export type CreateMorningTestRequest = Omit<MorningTest, 'id' | 'accuracy'>;
export type CreateAfternoonTestRequest = Omit<AfternoonTest, 'id'>;
`;

    console.log('✅ OpenAPI型生成が完了しました');
    return typesContent;
  } catch (error) {
    console.error('❌ OpenAPI型生成エラー:', error.message);
    throw error;
  }
}

async function generateTypes() {
  try {
    console.log('🔄 OpenAPI仕様書からTypeScript型を生成中...');
    console.log(`📡 Backend URL: ${BACKEND_URL}/doc`);

    // 出力ディレクトリを作成
    await fs.mkdir(OUTPUT_DIR, { recursive: true });

    // OpenAPI仕様書を取得して型定義を生成
    console.log('📡 OpenAPI仕様書を取得中...');
    const response = await fetch(`${BACKEND_URL}/doc`);

    if (!response.ok) {
      throw new Error(`OpenAPI仕様書の取得に失敗: ${response.status} ${response.statusText}`);
    }

    const openApiSpec = await response.json();
    console.log('✅ OpenAPI仕様書を取得しました');

    // OpenAPI仕様書から直接型定義を生成
    console.log('🔄 OpenAPI仕様書から型定義を生成中...');
    const generatedTypes = generateTypesFromSpec(openApiSpec);

    // OpenAPI生成時は重複を避けるため、基本的な型のみ追加
    const additionalTypes = `
// Additional utility types for OpenAPI generated types

export interface StudyPlanProgress {
  planId: number;
  totalDays: number;
  completedDays: number;
  totalHours: number;
  completedHours: number;
  averageScore: number;
  streakDays: number;
  lastStudyDate?: string;
  upcomingMilestones: StudyMilestone[];
}

export interface StudyMilestone {
  id: number;
  title: string;
  targetDate: string;
  isCompleted: boolean;
  completedDate?: string;
  description?: string;
}

export interface StudyRecommendation {
  id: number;
  userId: number;
  type: 'topic_focus' | 'time_adjustment' | 'difficulty_change' | 'review_schedule';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  estimatedImpact: string;
  createdAt: string;
}

export interface StudyPlanTemplate {
  id: number;
  name: string;
  description: string;
  defaultPeriodDays: number;
  defaultWeeklyHours: number;
  targetAudience: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  features: string[];
  isPopular: boolean;
}

export interface StudyPlanPreferences {
  planId: number;
  reminderEnabled: boolean;
  reminderTime?: string;
  weekendStudy: boolean;
  intensiveMode: boolean;
  adaptiveDifficulty: boolean;
  notificationPreferences: {
    email: boolean;
    push: boolean;
    daily: boolean;
    weekly: boolean;
  };
}

export interface UpdateStudyPlanRequest {
  name?: string;
  description?: string;
  totalWeeks?: number;
  weeklyHours?: number;
  dailyHours?: number;
  targetExamDate?: string;
  isActive?: boolean;
  settings?: Record<string, any>;
}

export interface CreateStudyPlanFromTemplateRequest {
  templateId: number;
  customization?: {
    name?: string;
    description?: string;
    totalWeeks?: number;
    weeklyHours?: number;
    dailyHours?: number;
  };
}

export interface UpdateStudyPlanPreferencesRequest {
  reminderEnabled?: boolean;
  reminderTime?: string;
  weekendStudy?: boolean;
  intensiveMode?: boolean;
  adaptiveDifficulty?: boolean;
  notificationPreferences?: {
    email?: boolean;
    push?: boolean;
    daily?: boolean;
    weekly?: boolean;
  };
}

export interface TimeRange {
  startTime: string;
  endTime: string;
}`;

    const typesWithAdditions = generatedTypes + additionalTypes;

    // ファイルに保存
    await fs.writeFile(OUTPUT_FILE, typesWithAdditions, 'utf8');

    console.log('✅ OpenAPIからTypeScript型定義を生成しました');
    console.log(`📁 出力先: ${OUTPUT_FILE}`);

    // 生成された型の数を表示
    const typeCount = (typesWithAdditions.match(/export type/g) || []).length;
    const interfaceCount = (typesWithAdditions.match(/export interface/g) || []).length;
    console.log(`📊 生成された型: ${typeCount} types, ${interfaceCount} interfaces`);
  } catch (error) {
    console.error('❌ OpenAPI型生成エラー:', error.message);

    // エラー時のフォールバック処理
    console.log('🔄 フォールバック型定義を使用します');
    await generateFallbackTypes();
  }
}

async function generateFallbackTypes() {
  try {
    // 基本的な型定義（フォールバック）
    const fallbackTypes = `// Fallback type definitions (OpenAPI generation failed)
// Do not edit this file manually

export interface StudyLog {
  id: number;
  date: string;
  subject: string;
  topics: string[];
  studyTime: number;
  understanding: number;
  memo?: string;
  efficiency?: number;
}

export interface StudyWeek {
  id: number;
  weekNumber: number;
  title: string;
  phase: string;
  goals: string[];
  days: StudyDay[];
  progressPercentage: number;
  totalStudyTime: number;
  averageUnderstanding: number;
}

export interface StudyDay {
  id: number;
  day: string;
  subject: string;
  topics: string[];
  estimatedTime: number;
  actualTime: number;
  completed: boolean;
  understanding: number;
  memo?: string;
}

export interface QuizSession {
  id: number;
  userId?: number;
  sessionType: 'category' | 'random' | 'review' | 'weak_points';
  category?: string;
  totalQuestions: number;
  correctAnswers: number;
  totalTime: number;
  avgTimePerQ: number;
  score: number;
  startedAt: string;
  completedAt?: string;
  isCompleted: boolean;
}

export interface Question {
  id: string;
  year: number;
  season: string;
  section: string;
  number: number;
  category: string;
  subcategory?: string;
  difficulty: number;
  question: string;
  choices: string[];
  tags?: string[];
}

export interface MorningTest {
  id?: number;
  date: string;
  category: string;
  totalQuestions: number;
  correctAnswers: number;
  accuracy?: number;
  timeSpent: number;
  memo?: string;
}

export interface AfternoonTest {
  id?: number;
  date: string;
  category: string;
  score: number;
  timeSpent: number;
  memo?: string;
}

// Additional utility types
export type ApiResponse<T> = {
  success: true;
  data: T;
} | {
  success: false;
  error: string;
};

// Request types
export type CreateStudyLogRequest = Omit<StudyLog, 'id' | 'efficiency'>;
export type StartQuizSessionRequest = {
  sessionType: 'category' | 'random' | 'review' | 'weak_points';
  questionCount: number;
  category?: string;
};
export type SubmitAnswerRequest = {
  sessionId: number;
  questionId: string;
  userAnswer: string;
  timeSpent?: number;
};
export type CreateMorningTestRequest = Omit<MorningTest, 'id' | 'accuracy'>;
export type CreateAfternoonTestRequest = Omit<AfternoonTest, 'id'>;

// 重複除去済み - 上記で定義済み

export interface StudySession {
  startTime: string;
  duration: number;
  subject?: string;
  sessionType: 'focus' | 'review' | 'quiz' | 'break';
  intensity: 'low' | 'medium' | 'high';
}

export interface TimeRange {
  startTime: string;
  endTime: string;
}

export interface StudyPlanProgress {
  planId: number;
  totalDays: number;
  completedDays: number;
  totalHours: number;
  completedHours: number;
  averageScore: number;
  streakDays: number;
  lastStudyDate?: string;
  upcomingMilestones: StudyMilestone[];
}

export interface StudyMilestone {
  id: number;
  title: string;
  targetDate: string;
  isCompleted: boolean;
  completedDate?: string;
  description?: string;
}

export interface StudyRecommendation {
  id: number;
  userId: number;
  type: 'topic_focus' | 'time_adjustment' | 'difficulty_change' | 'review_schedule';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  estimatedImpact: string;
  createdAt: string;
}

export interface StudyPlanTemplate {
  id: number;
  name: string;
  description: string;
  defaultPeriodDays: number;
  defaultWeeklyHours: number;
  targetAudience: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  features: string[];
  isPopular: boolean;
}

export interface StudyPlanPreferences {
  planId: number;
  reminderEnabled: boolean;
  reminderTime?: string;
  weekendStudy: boolean;
  intensiveMode: boolean;
  adaptiveDifficulty: boolean;
  notificationPreferences: {
    email: boolean;
    push: boolean;
    daily: boolean;
    weekly: boolean;
  };
}

export interface UpdateStudyPlanRequest {
  title?: string;
  description?: string;
  studyPeriodDays?: number;
  weeklyStudyHours?: number;
  dailyStudyHours?: number;
  learningStyle?: 'visual' | 'auditory' | 'kinesthetic' | 'reading';
  difficultyPreference?: 'easy' | 'medium' | 'hard' | 'mixed';
  isActive?: boolean;
}

export interface CreateStudyPlanFromTemplateRequest {
  templateId: number;
  customization?: {
    title?: string;
    studyPeriodDays?: number;
    weeklyStudyHours?: number;
    dailyStudyHours?: number;
    learningStyle?: 'visual' | 'auditory' | 'kinesthetic' | 'reading';
    difficultyPreference?: 'easy' | 'medium' | 'hard' | 'mixed';
  };
}

export interface UpdateStudyPlanPreferencesRequest {
  reminderEnabled?: boolean;
  reminderTime?: string;
  weekendStudy?: boolean;
  intensiveMode?: boolean;
  adaptiveDifficulty?: boolean;
  notificationPreferences?: {
    email?: boolean;
    push?: boolean;
    daily?: boolean;
    weekly?: boolean;
  };
}

export interface WeeklyStudyPattern {
  monday: string;
  tuesday: string;
  wednesday: string;
  thursday: string;
  friday: string;
  saturday?: string;
  sunday?: string;
}

export interface StudyScheduleTemplate {
  id: number;
  name: string;
  description: string;
  weeklyPattern: WeeklyStudyPattern;
  targetDifficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedHoursPerWeek: number;
  isFlexible: boolean;
}

// StudyPlan interface (required for StudyProgress component)
export interface StudyPlan {
  id: number;
  userId: number;
  name: string;
  description?: string;
  isActive: boolean;
  startDate: string;
  targetExamDate?: string;
  createdAt: string;
  updatedAt: string;
  templateId?: string;
  templateName?: string;
  studyWeeksData?: any;
  settings: Record<string, any>;
  weeks?: any[];
}

export interface CreateStudyPlanRequest {
  name: string;
  description?: string;
  templateId?: string;
  templateName?: string;
  studyWeeksData?: any[];
  targetExamDate?: string;
  startDate?: string;
  settings?: Record<string, any>;
}
`;

    // ファイルに保存
    await fs.writeFile(OUTPUT_FILE, fallbackTypes, 'utf8');

    console.log('✅ フォールバック型定義を生成しました');
    console.log(`📁 出力先: ${OUTPUT_FILE}`);

    // 生成された型の数を表示
    const typeCount = (fallbackTypes.match(/export type/g) || []).length;
    const interfaceCount = (fallbackTypes.match(/export interface/g) || []).length;
    console.log(`📊 生成された型: ${typeCount} types, ${interfaceCount} interfaces`);
  } catch (error) {
    console.error('❌ フォールバック型生成エラー:', error.message);

    // 最終的なフォールバック - 既存のapi.tsを保持
    console.log('💡 最終フォールバック: 既存のapi.tsファイルを保持します');

    // 既存ファイルが存在しない場合は最小限の基本型を作成
    try {
      await fs.access(OUTPUT_FILE);
      console.log('✅ 既存のapi.tsファイルが存在します');
    } catch {
      console.log('📝 最小限の型定義を作成します');
      const basicTypes = `// Minimal type definitions (emergency fallback)
export interface StudyLog {
  id: number;
  date: string;
  subject: string;
  topics: string[];
  studyTime: number;
  understanding: number;
}

export type ApiResponse<T> = {
  success: true;
  data: T;
} | {
  success: false;
  error: string;
};
`;
      await fs.writeFile(OUTPUT_FILE, basicTypes, 'utf8');
    }
  }
}

// スクリプト実行時にバックエンドの起動確認
async function checkBackend() {
  try {
    const response = await fetch(`${BACKEND_URL}/`);
    if (response.ok) {
      console.log('✅ バックエンドサーバーが起動しています');
      return true;
    }
  } catch (error) {
    console.log('⚠️  バックエンドサーバーに接続できません');
    return false;
  }
  return false;
}

async function main() {
  console.log('🚀 API型生成スクリプト開始');

  const backendRunning = await checkBackend();
  if (!backendRunning) {
    console.log('💡 バックエンドが起動していないため、フォールバック型定義を使用します');
    await generateFallbackTypes();
  } else {
    console.log('✅ バックエンドが起動しています - OpenAPI連携を試行します');
    await generateTypes();
  }

  console.log('🎉 型生成完了!');
}

main();
