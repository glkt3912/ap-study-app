#!/usr/bin/env node

import fs from 'fs/promises'
import path from 'path'

/**
 * OpenAPI仕様書からTypeScript型定義を自動生成するスクリプト
 */

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000'
const OUTPUT_DIR = path.join(process.cwd(), 'src', 'types')
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'api.ts')

async function generateTypes() {
  try {
    console.log('🔄 OpenAPI仕様書からTypeScript型を生成中...')
    console.log(`📡 Backend URL: ${BACKEND_URL}/doc`)

    // 出力ディレクトリを作成
    await fs.mkdir(OUTPUT_DIR, { recursive: true })

    // OpenAPI仕様書を取得（現在は直接型定義を生成）
    console.log('✅ 基本型定義を生成します')

    // 基本的な型定義（フォールバック）
    const fallbackTypes = `// Auto-generated from OpenAPI specification
// Do not edit this file manually

export interface StudyLog {
  id: number;
  userId: number;
  date: string;
  subjectId: number;
  topicId: number | null;
  studyTime: number;
  correctAnswers: number;
  totalQuestions: number;
  notes: string | null;
  createdAt: string;
  updatedAt: string;
}

export interface StudyPlan {
  id: number;
  userId: number;
  subjectId: number;
  startDate: string;
  endDate: string;
  targetHours: number;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface AnalysisResult {
  id: number;
  userId: number;
  analysisDate: string;
  studyPattern: any;
  weaknessAnalysis: any;
  studyRecommendation: any;
  overallScore: number;
  createdAt: string;
  updatedAt: string;
}

export interface PredictionResult {
  id: number;
  userId: number;
  predictionDate: string;
  examDate: string;
  predictedScore: number;
  confidenceLevel: number;
  recommendations: any;
  createdAt: string;
  updatedAt: string;
}

export interface ReviewItem {
  id: number;
  userId: number;
  questionId: number;
  difficulty: number;
  lastReviewDate: string | null;
  nextReviewDate: string;
  reviewCount: number;
  masteryLevel: number;
  createdAt: string;
  updatedAt: string;
}

export interface Question {
  id: number;
  text: string;
  choices: string[];
  correctAnswer: number;
  explanation: string;
  category: string;
  difficulty: number;
  tags: string[];
}

export interface QuizSession {
  id: number;
  userId: number;
  sessionType: string;
  category?: string;
  totalQuestions: number;
  correctAnswers: number;
  score: number;
  totalTime: number;
  avgTimePerQ: number;
  isCompleted: boolean;
  createdAt: string;
  completedAt?: string;
}

// Additional utility types
export type ApiResponse<T> = {
  success: true;
  data: T;
} | {
  success: false;
  error: string;
};

export type CreateStudyLogRequest = Omit<StudyLog, 'id' | 'createdAt' | 'updatedAt'>;
export type UpdateStudyLogRequest = Partial<CreateStudyLogRequest>;

export type CreateStudyPlanRequest = Omit<StudyPlan, 'id' | 'createdAt' | 'updatedAt'>;
export type UpdateStudyPlanRequest = Partial<CreateStudyPlanRequest>;
`

    // ファイルに保存
    await fs.writeFile(OUTPUT_FILE, fallbackTypes, 'utf8')

    console.log('✅ TypeScript型定義を生成しました')
    console.log(`📁 出力先: ${OUTPUT_FILE}`)

    // 生成された型の数を表示
    const typeCount = (fallbackTypes.match(/export type/g) || []).length
    const interfaceCount = (fallbackTypes.match(/export interface/g) || []).length
    console.log(`📊 生成された型: ${typeCount} types, ${interfaceCount} interfaces`)

  } catch (error) {
    console.error('❌ 型生成エラー:', error.message)
    
    // エラー時のフォールバック - 既存のapi.tsを保持
    console.log('💡 フォールバック: 既存のapi.tsファイルを保持します')
    
    // 既存ファイルが存在しない場合は基本型を作成
    try {
      await fs.access(OUTPUT_FILE)
      console.log('✅ 既存のapi.tsファイルが存在します')
    } catch {
      console.log('📝 基本的な型定義を作成します')
      const basicTypes = `// Basic type definitions (fallback)
export interface StudyLog {
  id: number;
  userId: number;
  date: string;
  subjectId: number;
  topicId: number | null;
  studyTime: number;
  correctAnswers: number;
  totalQuestions: number;
  notes: string | null;
  createdAt: string;
  updatedAt: string;
}

export type ApiResponse<T> = {
  success: true;
  data: T;
} | {
  success: false;
  error: string;
};
`
      await fs.writeFile(OUTPUT_FILE, basicTypes, 'utf8')
    }
  }
}

// スクリプト実行時にバックエンドの起動確認
async function checkBackend() {
  try {
    const response = await fetch(`${BACKEND_URL}/`)
    if (response.ok) {
      console.log('✅ バックエンドサーバーが起動しています')
      return true
    }
  } catch (error) {
    console.log('⚠️  バックエンドサーバーに接続できません')
    return false
  }
  return false
}

async function main() {
  console.log('🚀 API型生成スクリプト開始')
  
  const backendRunning = await checkBackend()
  if (!backendRunning) {
    console.log('💡 バックエンドを起動してから再実行してください')
    process.exit(1)
  }
  
  await generateTypes()
  console.log('🎉 型生成完了!')
}

main()